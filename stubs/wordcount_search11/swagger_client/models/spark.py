# coding: utf-8

"""
    wordcount_search11

    Apps that count the number of specific characters  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: ghwlchlaks@naver.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Spark(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'str',
        'app_name': 'str',
        'file': 'str',
        'callback_method': 'str',
        'callback_addr': 'str',
        'word': 'str'
    }

    attribute_map = {
        'account': 'account',
        'app_name': 'app_name',
        'file': 'file',
        'callback_method': 'callback_method',
        'callback_addr': 'callback_addr',
        'word': '--word'
    }

    def __init__(self, account=None, app_name=None, file=None, callback_method=None, callback_addr=None, word=None):  # noqa: E501
        """Spark - a model defined in Swagger"""  # noqa: E501

        self._account = None
        self._app_name = None
        self._file = None
        self._callback_method = None
        self._callback_addr = None
        self._word = None
        self.discriminator = None

        self.account = account
        self.app_name = app_name
        self.file = file
        if callback_method is not None:
            self.callback_method = callback_method
        if callback_addr is not None:
            self.callback_addr = callback_addr
        if word is not None:
            self.word = word

    @property
    def account(self):
        """Gets the account of this Spark.  # noqa: E501

        issuer's account(email)  # noqa: E501

        :return: The account of this Spark.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Spark.

        issuer's account(email)  # noqa: E501

        :param account: The account of this Spark.  # noqa: E501
        :type: str
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    @property
    def app_name(self):
        """Gets the app_name of this Spark.  # noqa: E501

        app name  # noqa: E501

        :return: The app_name of this Spark.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this Spark.

        app name  # noqa: E501

        :param app_name: The app_name of this Spark.  # noqa: E501
        :type: str
        """
        if app_name is None:
            raise ValueError("Invalid value for `app_name`, must not be `None`")  # noqa: E501

        self._app_name = app_name

    @property
    def file(self):
        """Gets the file of this Spark.  # noqa: E501

        target file name  # noqa: E501

        :return: The file of this Spark.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this Spark.

        target file name  # noqa: E501

        :param file: The file of this Spark.  # noqa: E501
        :type: str
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file

    @property
    def callback_method(self):
        """Gets the callback_method of this Spark.  # noqa: E501

        callback target (email or slack)  # noqa: E501

        :return: The callback_method of this Spark.  # noqa: E501
        :rtype: str
        """
        return self._callback_method

    @callback_method.setter
    def callback_method(self, callback_method):
        """Sets the callback_method of this Spark.

        callback target (email or slack)  # noqa: E501

        :param callback_method: The callback_method of this Spark.  # noqa: E501
        :type: str
        """

        self._callback_method = callback_method

    @property
    def callback_addr(self):
        """Gets the callback_addr of this Spark.  # noqa: E501

        callback address  # noqa: E501

        :return: The callback_addr of this Spark.  # noqa: E501
        :rtype: str
        """
        return self._callback_addr

    @callback_addr.setter
    def callback_addr(self, callback_addr):
        """Sets the callback_addr of this Spark.

        callback address  # noqa: E501

        :param callback_addr: The callback_addr of this Spark.  # noqa: E501
        :type: str
        """

        self._callback_addr = callback_addr

    @property
    def word(self):
        """Gets the word of this Spark.  # noqa: E501

        Option to count the number of specific words (case sensitive)  # noqa: E501

        :return: The word of this Spark.  # noqa: E501
        :rtype: str
        """
        return self._word

    @word.setter
    def word(self, word):
        """Sets the word of this Spark.

        Option to count the number of specific words (case sensitive)  # noqa: E501

        :param word: The word of this Spark.  # noqa: E501
        :type: str
        """

        self._word = word

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Spark):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
